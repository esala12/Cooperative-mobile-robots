<launch>
     <!-- these are the arguments you can pass this launch file, for example paused:=true -->
     <arg name="world" default="$(find masterbot_gazebo)/world/masterbot_maze2.world"/>
     <arg name="paused" default="false"/>
     <arg name="use_sim_time" default="true"/>
     <arg name="gui" default="true"/>
     <arg name="headless" default="false"/>
     <arg name="debug" default="false"/>
   
     <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
     <include file="$(find gazebo_ros)/launch/empty_world.launch">
       <arg name="world_name" value="$(arg world)"/>
       <arg name="debug" value="$(arg debug)" />
       <arg name="gui" value="$(arg gui)" />
       <arg name="paused" value="$(arg paused)"/>
       <arg name="use_sim_time" value="$(arg use_sim_time)"/>
       <arg name="headless" value="$(arg headless)"/>
     </include>
   
     <!-- Load the URDF into the ROS Parameter Server -->
     <param name="robot_description"
       command="$(find xacro)/xacro --inorder '$(find masterbot_description)/urdf/masterbot.urdf.xacro'" />
   
     <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
     <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" args="-urdf -model masterbot -param robot_description"/>
   
     <!-- send fake joint values -->
     <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

     <node name="masterbot_pid_node" pkg="masterbot_odometry" type="masterbotpid.py" output="screen"/>

     <node pkg="masterbot_odometry" type="kalman_filter.py" name="kalman_filter" output="screen"/>

     <node pkg="masterbot_odometry" type="tf_kalman_node.py" name="tf_kalman_node" output="screen"/>

     

</launch>
   